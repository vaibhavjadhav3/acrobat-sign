package adobesign.api.rest.sample;

import java.security.cert.X509Certificate;

import javax.net.ssl.HostnameVerifier;
import javax.net.ssl.HttpsURLConnection;
import javax.net.ssl.SSLContext;
import javax.net.ssl.SSLSession;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;

import adobesign.api.rest.sample.util.RestApiAgreements;
import adobesign.api.rest.sample.util.RestApiOAuthTokens;

public class GetUnsignedAgreementId{
	  // File containing request body to get an access token.
	  private static final String authRequestJSONFileName = "OAuthCredentials.json";

	  /**
	   * Entry point for this sample client program.
	   */
	  public static void main(String args[]) {
	    try {
	    	GetUnsignedAgreementId client = new GetUnsignedAgreementId();
	      client.run();
	    }
	    catch (Exception e) {
	      System.err.println("Failure in getting unsigned agreements.");
	      e.printStackTrace();
	    }
	  }

	  /**
	   * Main work function. See the class comment for details.
	   */
	  private void run() throws Exception
	  
	  
	  {

		  TrustManager[] trustAllCerts = new TrustManager[]
				   {
						  new X509TrustManager()
						  {
							  public java.security.cert.X509Certificate[] getAcceptedIssuers(){return null;}
							  public void checkClientTrusted(X509Certificate[] certs, String authType){}
							  public void checkServerTrusted(X509Certificate[] certs, String authType){}
				  		} 
				  	};	
		  
			// Install the all-trusting trust manager
			final SSLContext sc = SSLContext.getInstance("SSL");
			sc.init(null, trustAllCerts, new java.security.SecureRandom());
			HttpsURLConnection.setDefaultSSLSocketFactory(sc.getSocketFactory());
			
			// Create all-trusting host name verifier
			HostnameVerifier allHostsValid = new HostnameVerifier(){public boolean verify(String hostname, SSLSession session){return true;}};
			    
			    HttpsURLConnection.setDefaultHostnameVerifier(allHostsValid);
	    // Get oauth access token to make further API calls.
	    String accessToken = RestApiOAuthTokens.getOauthAccessToken(authRequestJSONFileName);

	    JSONArray agreementList = RestApiAgreements.getMyAgreements(accessToken);

	    if (agreementList != null) 
	    {
	    	
		    	for (Object eachAgreement : agreementList)
		    	{
		    		JSONObject agreement = (JSONObject) eachAgreement;
		    		
		    		
				    		if (!((String) agreement.get("status")).equalsIgnoreCase("SIGNED")) 
			                {
			                    String agreementId = (String) agreement.get("id");
			                    System.out.println("Not yet signed Agreement Named: " + agreement.get("name")+" with agreement ID:" + agreementId
			                    		+" is "+agreement.get("status"));
			                    break;
			                }
	            }
		    	
	     
	    	
	    	
	    	
	   
	    }
	  }
	}
